/*
 * CWpnCodec.java
 *
 * Created on 2006/08/27, 16:57
 * Modified on 2009/03/21
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

import java.lang.Math;
/**
 *
 * @author [Nushi]@[2SN] Copyright 2006 2SN http://2sen.dip.jp/
 * @modified Emulator Copyright 2009 CrystalSoft http://www.emulator.netsons.org
 */

public class WpnEnc
{
    //WPNP Crypt Key Structure
    public static class CWpnCryptKey
    {
	public byte UpKey[];
	public byte DwKey[];

	public CWpnCryptKey()
	{
	    UpKey = new byte[4];
	    DwKey = new byte[4];
	}
    }

    /** Creates a new instance of CWpnCodec */
    public WpnEnc()
    {
        
    }

    //WPNP TCP Message Crypt Table 0
    private static final byte TcpCodeTable0[] =
    {
	(byte)0x3f, (byte)0xaf, (byte)0x25, (byte)0x93, (byte)0xbd, (byte)0xb4, (byte)0x23, (byte)0xf3, (byte)0x55, (byte)0xb9, (byte)0xc5, (byte)0xad, (byte)0x31, (byte)0xb1, (byte)0x8b, (byte)0x48,
	(byte)0x2e, (byte)0x27, (byte)0xb6, (byte)0xdd, (byte)0xd6, (byte)0x74, (byte)0x99, (byte)0xef, (byte)0x5c, (byte)0x19, (byte)0x90, (byte)0x46, (byte)0x59, (byte)0xfc, (byte)0x7d, (byte)0xab,
	(byte)0x52, (byte)0x5b, (byte)0x5d, (byte)0x07, (byte)0x33, (byte)0xf4, (byte)0x12, (byte)0x15, (byte)0x82, (byte)0x26, (byte)0x0e, (byte)0xb8, (byte)0x62, (byte)0x4a, (byte)0xfa, (byte)0xee,
	(byte)0x69, (byte)0x3a, (byte)0x06, (byte)0x57, (byte)0x0a, (byte)0x72, (byte)0xf9, (byte)0x2d, (byte)0x9b, (byte)0x35, (byte)0x28, (byte)0xc9, (byte)0xe2, (byte)0x88, (byte)0xf0, (byte)0xeb,
	(byte)0x21, (byte)0x49, (byte)0x4b, (byte)0x44, (byte)0x18, (byte)0x2a, (byte)0x13, (byte)0xe1, (byte)0x95, (byte)0x60, (byte)0x36, (byte)0xe3, (byte)0x0d, (byte)0x84, (byte)0xff, (byte)0xbe,
	(byte)0xa6, (byte)0xe6, (byte)0x20, (byte)0x6c, (byte)0x8f, (byte)0x71, (byte)0x37, (byte)0xd7, (byte)0x50, (byte)0xc6, (byte)0xf7, (byte)0x65, (byte)0xfe, (byte)0x75, (byte)0xa9, (byte)0x0c,
	(byte)0xd9, (byte)0xea, (byte)0x0b, (byte)0x64, (byte)0xf8, (byte)0x70, (byte)0x6b, (byte)0x4d, (byte)0xae, (byte)0x83, (byte)0xec, (byte)0x6f, (byte)0x6d, (byte)0xbf, (byte)0xd8, (byte)0xe4,
	(byte)0xbb, (byte)0x4f, (byte)0x42, (byte)0xdc, (byte)0x6e, (byte)0x02, (byte)0x98, (byte)0xda, (byte)0x22, (byte)0x24, (byte)0xc1, (byte)0x53, (byte)0xd2, (byte)0x3c, (byte)0x38, (byte)0xe5,
	(byte)0x17, (byte)0x0f, (byte)0x9a, (byte)0x1c, (byte)0x78, (byte)0x81, (byte)0x45, (byte)0x7e, (byte)0x3b, (byte)0x86, (byte)0xa1, (byte)0x97, (byte)0x5f, (byte)0x73, (byte)0x1b, (byte)0x94,
	(byte)0xf2, (byte)0xd1, (byte)0x43, (byte)0xce, (byte)0x7c, (byte)0xa5, (byte)0xfd, (byte)0x11, (byte)0x58, (byte)0x7b, (byte)0x91, (byte)0x01, (byte)0x7f, (byte)0x76, (byte)0xdf, (byte)0x77,
	(byte)0xe0, (byte)0x9f, (byte)0xbc, (byte)0x7a, (byte)0xcf, (byte)0x30, (byte)0xa4, (byte)0x32, (byte)0x34, (byte)0x9c, (byte)0x54, (byte)0xca, (byte)0x3d, (byte)0xe7, (byte)0x56, (byte)0x89,
	(byte)0x08, (byte)0xb2, (byte)0x6a, (byte)0x67, (byte)0x16, (byte)0xdb, (byte)0xc7, (byte)0xe8, (byte)0x03, (byte)0xed, (byte)0x40, (byte)0x1f, (byte)0x63, (byte)0xd0, (byte)0xf6, (byte)0x61,
	(byte)0x9d, (byte)0x8a, (byte)0x9e, (byte)0xb5, (byte)0x29, (byte)0x47, (byte)0xc8, (byte)0x1a, (byte)0x8e, (byte)0x80, (byte)0x5a, (byte)0xcc, (byte)0x68, (byte)0x2c, (byte)0xd4, (byte)0xde,
	(byte)0xc4, (byte)0x39, (byte)0xa2, (byte)0x4e, (byte)0x79, (byte)0x1e, (byte)0xa8, (byte)0xcd, (byte)0xa0, (byte)0xd3, (byte)0x96, (byte)0xf5, (byte)0xb0, (byte)0x66, (byte)0x05, (byte)0x00,
	(byte)0xf1, (byte)0xac, (byte)0xc2, (byte)0xe9, (byte)0xd5, (byte)0x85, (byte)0x04, (byte)0xa3, (byte)0x51, (byte)0xfb, (byte)0x8d, (byte)0x09, (byte)0x2b, (byte)0x4c, (byte)0x5e, (byte)0xba,
	(byte)0x10, (byte)0x41, (byte)0xb3, (byte)0x92, (byte)0xa7, (byte)0x87, (byte)0x3e, (byte)0x8c, (byte)0xc3, (byte)0xb7, (byte)0xaa, (byte)0x2f, (byte)0x14, (byte)0x1d, (byte)0xcb, (byte)0xc0
    };

    //WPNP TCP Message Crypt Table 1
    private static final byte TcpCodeTable1[] =
    {
	(byte)0xdf, (byte)0x9b, (byte)0x75, (byte)0xb8, (byte)0xe6, (byte)0xde, (byte)0x32, (byte)0x23, (byte)0xb0, (byte)0xeb, (byte)0x34, (byte)0x62, (byte)0x5f, (byte)0x4c, (byte)0x2a, (byte)0x81,
	(byte)0xf0, (byte)0x97, (byte)0x26, (byte)0x46, (byte)0xfc, (byte)0x27, (byte)0xb4, (byte)0x80, (byte)0x44, (byte)0x19, (byte)0xc7, (byte)0x8e, (byte)0x83, (byte)0xfd, (byte)0xd5, (byte)0xbb,
	(byte)0x52, (byte)0x40, (byte)0x78, (byte)0x06, (byte)0x79, (byte)0x02, (byte)0x29, (byte)0x11, (byte)0x3a, (byte)0xc4, (byte)0x45, (byte)0xec, (byte)0xcd, (byte)0x37, (byte)0x10, (byte)0xfb,
	(byte)0xa5, (byte)0x0c, (byte)0xa7, (byte)0x24, (byte)0xa8, (byte)0x39, (byte)0x4a, (byte)0x56, (byte)0x7e, (byte)0xd1, (byte)0x31, (byte)0x88, (byte)0x7d, (byte)0xac, (byte)0xf6, (byte)0x00,
	(byte)0xba, (byte)0xf1, (byte)0x72, (byte)0x92, (byte)0x43, (byte)0x86, (byte)0x1b, (byte)0xc5, (byte)0x0f, (byte)0x41, (byte)0x2d, (byte)0x42, (byte)0xed, (byte)0x67, (byte)0xd3, (byte)0x71,
	(byte)0x58, (byte)0xe8, (byte)0x20, (byte)0x7b, (byte)0xaa, (byte)0x08, (byte)0xae, (byte)0x33, (byte)0x98, (byte)0x1c, (byte)0xca, (byte)0x21, (byte)0x18, (byte)0x22, (byte)0xee, (byte)0x8c,
	(byte)0x49, (byte)0xbf, (byte)0x2c, (byte)0xbc, (byte)0x63, (byte)0x5b, (byte)0xdd, (byte)0xb3, (byte)0xcc, (byte)0x30, (byte)0xb2, (byte)0x66, (byte)0x53, (byte)0x6c, (byte)0x74, (byte)0x6b,
	(byte)0x65, (byte)0x55, (byte)0x35, (byte)0x8d, (byte)0x15, (byte)0x5d, (byte)0x9d, (byte)0x9f, (byte)0x84, (byte)0xd4, (byte)0xa3, (byte)0x99, (byte)0x94, (byte)0x1e, (byte)0x87, (byte)0x9c,
	(byte)0xc9, (byte)0x85, (byte)0x28, (byte)0x69, (byte)0x4d, (byte)0xe5, (byte)0x89, (byte)0xf5, (byte)0x3d, (byte)0xaf, (byte)0xc1, (byte)0x0e, (byte)0xf7, (byte)0xea, (byte)0xc8, (byte)0x54,
	(byte)0x1a, (byte)0x9a, (byte)0xf3, (byte)0x03, (byte)0x8f, (byte)0x48, (byte)0xda, (byte)0x8b, (byte)0x76, (byte)0x16, (byte)0x82, (byte)0x38, (byte)0xa9, (byte)0xc0, (byte)0xc2, (byte)0xa1,
	(byte)0xd8, (byte)0x8a, (byte)0xd2, (byte)0xe7, (byte)0xa6, (byte)0x95, (byte)0x50, (byte)0xf4, (byte)0xd6, (byte)0x5e, (byte)0xfa, (byte)0x1f, (byte)0xe1, (byte)0x0b, (byte)0x68, (byte)0x01,
	(byte)0xdc, (byte)0x0d, (byte)0xb1, (byte)0xf2, (byte)0x05, (byte)0xc3, (byte)0x12, (byte)0xf9, (byte)0x2b, (byte)0x09, (byte)0xef, (byte)0x70, (byte)0xa2, (byte)0x04, (byte)0x4f, (byte)0x6d,
	(byte)0xff, (byte)0x7a, (byte)0xe2, (byte)0xf8, (byte)0xd0, (byte)0x0a, (byte)0x59, (byte)0xb6, (byte)0xc6, (byte)0x3b, (byte)0xab, (byte)0xfe, (byte)0xcb, (byte)0xd7, (byte)0x93, (byte)0xa4,
	(byte)0xbd, (byte)0x91, (byte)0x7c, (byte)0xd9, (byte)0xce, (byte)0xe4, (byte)0x14, (byte)0x57, (byte)0x6e, (byte)0x60, (byte)0x77, (byte)0xb5, (byte)0x73, (byte)0x13, (byte)0xcf, (byte)0x9e,
	(byte)0xa0, (byte)0x47, (byte)0x3c, (byte)0x4b, (byte)0x6f, (byte)0x7f, (byte)0x51, (byte)0xad, (byte)0xb7, (byte)0xe3, (byte)0x61, (byte)0x3f, (byte)0x6a, (byte)0xb9, (byte)0x2f, (byte)0x17,
	(byte)0x3e, (byte)0xe0, (byte)0x90, (byte)0x07, (byte)0x25, (byte)0xdb, (byte)0xbe, (byte)0x5a, (byte)0x64, (byte)0x36, (byte)0x2e, (byte)0xe9, (byte)0x1d, (byte)0x96, (byte)0x5c, (byte)0x4e
    };

    //WPNP TCP Message Crypt Table 2
    private static final byte TcpCodeTable2[] =
    {
	(byte)0xd2, (byte)0x3a, (byte)0x74, (byte)0xaf, (byte)0xb5, (byte)0xa9, (byte)0xce, (byte)0x93, (byte)0x46, (byte)0x96, (byte)0x47, (byte)0xcd, (byte)0xa8, (byte)0x69, (byte)0xf7, (byte)0x23,
	(byte)0x81, (byte)0x78, (byte)0xfb, (byte)0x13, (byte)0x8d, (byte)0x2d, (byte)0x45, (byte)0x8e, (byte)0x1b, (byte)0xae, (byte)0x0f, (byte)0x22, (byte)0xb9, (byte)0x38, (byte)0x67, (byte)0x4a,
	(byte)0xe4, (byte)0x27, (byte)0xaa, (byte)0x52, (byte)0x20, (byte)0x4c, (byte)0x99, (byte)0x3c, (byte)0x29, (byte)0x94, (byte)0x30, (byte)0xe8, (byte)0xbc, (byte)0x42, (byte)0x7b, (byte)0xfd,
	(byte)0xe5, (byte)0xfc, (byte)0x40, (byte)0x91, (byte)0x3b, (byte)0xef, (byte)0x4f, (byte)0xf2, (byte)0xba, (byte)0x65, (byte)0x31, (byte)0xf3, (byte)0xe0, (byte)0xa5, (byte)0x18, (byte)0xdb,
	(byte)0x66, (byte)0x2e, (byte)0x43, (byte)0x6b, (byte)0xb4, (byte)0xb6, (byte)0x50, (byte)0x2a, (byte)0x12, (byte)0xf9, (byte)0x36, (byte)0xf8, (byte)0x8a, (byte)0x2f, (byte)0xc7, (byte)0xb3,
	(byte)0xb2, (byte)0xe6, (byte)0xc3, (byte)0x33, (byte)0x76, (byte)0x72, (byte)0x80, (byte)0xf5, (byte)0x92, (byte)0xab, (byte)0x85, (byte)0x10, (byte)0xc2, (byte)0xcb, (byte)0x97, (byte)0x1d,
	(byte)0xd4, (byte)0xcf, (byte)0x54, (byte)0x58, (byte)0xc5, (byte)0x48, (byte)0x4d, (byte)0x5f, (byte)0xc1, (byte)0xb7, (byte)0x5c, (byte)0x25, (byte)0x34, (byte)0xf0, (byte)0x73, (byte)0xeb,
	(byte)0xad, (byte)0x14, (byte)0xbf, (byte)0x5e, (byte)0x06, (byte)0x1f, (byte)0xfe, (byte)0x61, (byte)0x71, (byte)0xea, (byte)0x01, (byte)0x24, (byte)0x7d, (byte)0x08, (byte)0x9d, (byte)0x84,
	(byte)0x5b, (byte)0x2b, (byte)0x4e, (byte)0xf4, (byte)0x41, (byte)0x57, (byte)0xa3, (byte)0x53, (byte)0x00, (byte)0x0b, (byte)0x5d, (byte)0x0c, (byte)0x1e, (byte)0xa1, (byte)0x3f, (byte)0x4b,
	(byte)0x1c, (byte)0x64, (byte)0x28, (byte)0x8c, (byte)0x9a, (byte)0x60, (byte)0xc6, (byte)0x26, (byte)0x19, (byte)0xcc, (byte)0x63, (byte)0x88, (byte)0xf1, (byte)0x09, (byte)0x8f, (byte)0x0d,
	(byte)0x04, (byte)0xbd, (byte)0x8b, (byte)0xd5, (byte)0xdc, (byte)0x9f, (byte)0x87, (byte)0xde, (byte)0xbe, (byte)0x7e, (byte)0x95, (byte)0x51, (byte)0xc8, (byte)0x5a, (byte)0x11, (byte)0xda,
	(byte)0x70, (byte)0x3d, (byte)0x68, (byte)0x7f, (byte)0x3e, (byte)0xe9, (byte)0xc9, (byte)0x59, (byte)0xd7, (byte)0x6e, (byte)0x79, (byte)0x6a, (byte)0x15, (byte)0xd0, (byte)0x77, (byte)0x89,
	(byte)0x6f, (byte)0xa2, (byte)0x02, (byte)0x86, (byte)0xe3, (byte)0x90, (byte)0xa6, (byte)0x9e, (byte)0x6c, (byte)0x05, (byte)0x0e, (byte)0xfa, (byte)0xd3, (byte)0xd9, (byte)0x62, (byte)0x6d,
	(byte)0x16, (byte)0xc0, (byte)0xe2, (byte)0x03, (byte)0x83, (byte)0x17, (byte)0xd6, (byte)0xa4, (byte)0x0a, (byte)0x7c, (byte)0x39, (byte)0x1a, (byte)0xdf, (byte)0xec, (byte)0x21, (byte)0x2c,
	(byte)0xb0, (byte)0x44, (byte)0x9b, (byte)0xbb, (byte)0x75, (byte)0x07, (byte)0x7a, (byte)0xc4, (byte)0xa0, (byte)0xa7, (byte)0xf6, (byte)0xb8, (byte)0xb1, (byte)0xac, (byte)0xff, (byte)0xed,
	(byte)0xca, (byte)0x82, (byte)0xe1, (byte)0xd1, (byte)0x9c, (byte)0x98, (byte)0x55, (byte)0xd8, (byte)0xe7, (byte)0x56, (byte)0xee, (byte)0x35, (byte)0x49, (byte)0xdd, (byte)0x32, (byte)0x37
    };

    //WPNP TCP Message Crypt Table 3
    private static final byte TcpCodeTable3[] =
    {
	(byte)0x88, (byte)0x7a, (byte)0xc2, (byte)0xd3, (byte)0xa0, (byte)0xc9, (byte)0x74, (byte)0xe5, (byte)0x7d, (byte)0x9d, (byte)0xd8, (byte)0x89, (byte)0x8b, (byte)0x9f, (byte)0xca, (byte)0x1a,
	(byte)0x5b, (byte)0xae, (byte)0x48, (byte)0x13, (byte)0x71, (byte)0xbc, (byte)0xd0, (byte)0xd5, (byte)0x3e, (byte)0x98, (byte)0xdb, (byte)0x18, (byte)0x90, (byte)0x5f, (byte)0x8c, (byte)0x75,
	(byte)0x24, (byte)0xde, (byte)0x1b, (byte)0x0f, (byte)0x7b, (byte)0x6b, (byte)0x97, (byte)0x21, (byte)0x92, (byte)0x28, (byte)0x47, (byte)0x81, (byte)0xdf, (byte)0x15, (byte)0x41, (byte)0x4d,
	(byte)0x2a, (byte)0x3a, (byte)0xfe, (byte)0x53, (byte)0x6c, (byte)0xfb, (byte)0x4a, (byte)0xff, (byte)0x1d, (byte)0xda, (byte)0x01, (byte)0x34, (byte)0x27, (byte)0xb1, (byte)0xb4, (byte)0x8e,
	(byte)0x32, (byte)0x84, (byte)0x2d, (byte)0x42, (byte)0xe1, (byte)0x16, (byte)0x08, (byte)0x0a, (byte)0x65, (byte)0xfc, (byte)0x1f, (byte)0x8f, (byte)0x25, (byte)0x66, (byte)0x82, (byte)0x36,
	(byte)0x46, (byte)0xab, (byte)0x23, (byte)0x87, (byte)0x62, (byte)0xf6, (byte)0xf9, (byte)0x85, (byte)0x63, (byte)0xb7, (byte)0xad, (byte)0x80, (byte)0x6a, (byte)0x8a, (byte)0x73, (byte)0x67,
	(byte)0x95, (byte)0x77, (byte)0xce, (byte)0x9a, (byte)0x91, (byte)0x39, (byte)0x40, (byte)0x1e, (byte)0xb2, (byte)0x0d, (byte)0xbb, (byte)0x43, (byte)0xc8, (byte)0xcf, (byte)0xb9, (byte)0xc0,
	(byte)0xb0, (byte)0x78, (byte)0x55, (byte)0x6e, (byte)0x02, (byte)0xe4, (byte)0x54, (byte)0xbe, (byte)0x11, (byte)0xba, (byte)0xe6, (byte)0x2e, (byte)0xd9, (byte)0x7c, (byte)0xa9, (byte)0xb3,
	(byte)0x56, (byte)0x10, (byte)0xf1, (byte)0xd4, (byte)0x7f, (byte)0x5a, (byte)0xc3, (byte)0xa6, (byte)0x9b, (byte)0xbf, (byte)0x4c, (byte)0xa2, (byte)0x93, (byte)0x14, (byte)0x17, (byte)0x9e,
	(byte)0xc5, (byte)0x33, (byte)0x58, (byte)0x07, (byte)0x29, (byte)0xaa, (byte)0x09, (byte)0x5e, (byte)0xf5, (byte)0x26, (byte)0x94, (byte)0xe2, (byte)0xf4, (byte)0x7e, (byte)0xc7, (byte)0xa5,
	(byte)0xe8, (byte)0x8d, (byte)0xc1, (byte)0x86, (byte)0xd7, (byte)0x3d, (byte)0xc6, (byte)0xe9, (byte)0x0c, (byte)0x05, (byte)0x22, (byte)0x59, (byte)0xed, (byte)0x70, (byte)0x19, (byte)0x03,
	(byte)0xe0, (byte)0xec, (byte)0x50, (byte)0x4f, (byte)0x44, (byte)0x04, (byte)0x45, (byte)0x69, (byte)0xeb, (byte)0x1c, (byte)0x38, (byte)0xe3, (byte)0x2c, (byte)0xa1, (byte)0xa8, (byte)0x72,
	(byte)0xd1, (byte)0x68, (byte)0x5c, (byte)0x52, (byte)0xe7, (byte)0x64, (byte)0x96, (byte)0x4e, (byte)0xac, (byte)0xb6, (byte)0xf0, (byte)0x5d, (byte)0x99, (byte)0x0b, (byte)0x06, (byte)0x61,
	(byte)0xbd, (byte)0xf3, (byte)0x00, (byte)0xcc, (byte)0x60, (byte)0xa3, (byte)0xd6, (byte)0xb8, (byte)0xf7, (byte)0xcd, (byte)0xaf, (byte)0x3f, (byte)0xa4, (byte)0xfd, (byte)0xa7, (byte)0xdc,
	(byte)0x3c, (byte)0xf2, (byte)0xd2, (byte)0xc4, (byte)0x20, (byte)0x30, (byte)0x51, (byte)0xf8, (byte)0x2b, (byte)0xb5, (byte)0x79, (byte)0x6f, (byte)0xdd, (byte)0xef, (byte)0xfa, (byte)0x35,
	(byte)0x6d, (byte)0x9c, (byte)0x37, (byte)0x3b, (byte)0x83, (byte)0x57, (byte)0xea, (byte)0x0e, (byte)0x4b, (byte)0x49, (byte)0xcb, (byte)0x12, (byte)0x31, (byte)0x2f, (byte)0x76, (byte)0xee
    };

    //WPNP TCP Message Crypt Table 4
    private static final byte TcpCodeTable4[] =
    {
	(byte)0x16, (byte)0x24, (byte)0xed, (byte)0x25, (byte)0xa8, (byte)0x55, (byte)0x5d, (byte)0x1a, (byte)0xe1, (byte)0x03, (byte)0x68, (byte)0x4c, (byte)0x4e, (byte)0xfa, (byte)0xfd, (byte)0x6e,
	(byte)0x3a, (byte)0xea, (byte)0xf1, (byte)0xf4, (byte)0xf6, (byte)0x21, (byte)0x9d, (byte)0x7f, (byte)0x44, (byte)0xcf, (byte)0x2d, (byte)0x4d, (byte)0x0d, (byte)0x96, (byte)0x63, (byte)0x13,
	(byte)0x8f, (byte)0xdc, (byte)0x07, (byte)0xc9, (byte)0xeb, (byte)0x3e, (byte)0x31, (byte)0x4a, (byte)0xa4, (byte)0xa6, (byte)0x7a, (byte)0x72, (byte)0xf0, (byte)0x04, (byte)0xe3, (byte)0x6c,
	(byte)0x05, (byte)0x19, (byte)0xb7, (byte)0x48, (byte)0x3d, (byte)0xab, (byte)0x14, (byte)0xf3, (byte)0xba, (byte)0xd6, (byte)0xd9, (byte)0xb5, (byte)0x0b, (byte)0x6b, (byte)0xd4, (byte)0x77,
	(byte)0xd7, (byte)0x8d, (byte)0x58, (byte)0x2e, (byte)0x87, (byte)0xe6, (byte)0x66, (byte)0x40, (byte)0x34, (byte)0xfc, (byte)0x18, (byte)0xf5, (byte)0x85, (byte)0xde, (byte)0x27, (byte)0xc6,
	(byte)0x1b, (byte)0x7c, (byte)0x20, (byte)0x11, (byte)0xc8, (byte)0x90, (byte)0x8b, (byte)0x6f, (byte)0x28, (byte)0x94, (byte)0x17, (byte)0xa1, (byte)0x54, (byte)0xe7, (byte)0xec, (byte)0x12,
	(byte)0xe2, (byte)0x00, (byte)0xf8, (byte)0xa5, (byte)0xd5, (byte)0x8e, (byte)0xda, (byte)0xc3, (byte)0x22, (byte)0xfb, (byte)0x80, (byte)0xb8, (byte)0xd1, (byte)0x6a, (byte)0x39, (byte)0x51,
	(byte)0xf2, (byte)0x7e, (byte)0x5e, (byte)0x06, (byte)0xbf, (byte)0x4b, (byte)0x82, (byte)0x98, (byte)0x8a, (byte)0x61, (byte)0xe9, (byte)0x49, (byte)0x7d, (byte)0x1c, (byte)0xaf, (byte)0x99,
	(byte)0x9a, (byte)0x46, (byte)0xc0, (byte)0x83, (byte)0x0a, (byte)0x15, (byte)0xc1, (byte)0xa0, (byte)0x1f, (byte)0xef, (byte)0xa9, (byte)0x5c, (byte)0xdb, (byte)0x86, (byte)0xb3, (byte)0xac,
	(byte)0x1e, (byte)0x42, (byte)0x81, (byte)0x69, (byte)0x3f, (byte)0xdf, (byte)0xd2, (byte)0xb4, (byte)0x26, (byte)0x9b, (byte)0x56, (byte)0x29, (byte)0x62, (byte)0x6d, (byte)0x09, (byte)0xa2,
	(byte)0xe0, (byte)0x3c, (byte)0x36, (byte)0xcd, (byte)0x88, (byte)0x74, (byte)0x65, (byte)0x95, (byte)0x92, (byte)0xc7, (byte)0xb1, (byte)0x30, (byte)0x76, (byte)0xc2, (byte)0x3b, (byte)0x2b,
	(byte)0xd8, (byte)0x5f, (byte)0x35, (byte)0x10, (byte)0x75, (byte)0x2c, (byte)0x8c, (byte)0x60, (byte)0xad, (byte)0x08, (byte)0x84, (byte)0xd3, (byte)0xe5, (byte)0x5a, (byte)0xa7, (byte)0xcb,
	(byte)0x0c, (byte)0x2a, (byte)0x33, (byte)0x37, (byte)0x32, (byte)0x23, (byte)0xbe, (byte)0x59, (byte)0xc4, (byte)0xca, (byte)0xb2, (byte)0xbd, (byte)0x7b, (byte)0x97, (byte)0x4f, (byte)0xb9,
	(byte)0xa3, (byte)0xae, (byte)0xb0, (byte)0xc5, (byte)0x0e, (byte)0x45, (byte)0x73, (byte)0x71, (byte)0x57, (byte)0x5b, (byte)0xf9, (byte)0xfe, (byte)0x41, (byte)0xee, (byte)0x91, (byte)0x93,
	(byte)0x79, (byte)0xb6, (byte)0xaa, (byte)0x47, (byte)0x38, (byte)0x89, (byte)0x01, (byte)0x64, (byte)0xbb, (byte)0x2f, (byte)0x1d, (byte)0x9e, (byte)0xdd, (byte)0xd0, (byte)0x78, (byte)0x50,
	(byte)0x43, (byte)0xe8, (byte)0x70, (byte)0xe4, (byte)0xcc, (byte)0x52, (byte)0x02, (byte)0x67, (byte)0xf7, (byte)0x9c, (byte)0xbc, (byte)0xce, (byte)0x0f, (byte)0x53, (byte)0x9f, (byte)0xff
    };

    //WPNP TCP Message Crypt Table 5
    private static final byte TcpCodeTable5[] =
    {
	(byte)0x61, (byte)0xe6, (byte)0xf6, (byte)0x09, (byte)0x2d, (byte)0x30, (byte)0x73, (byte)0x22, (byte)0xb9, (byte)0x9e, (byte)0x84, (byte)0x3c, (byte)0xc0, (byte)0x1c, (byte)0xd4, (byte)0xfc,
	(byte)0xb3, (byte)0x53, (byte)0x5f, (byte)0x1f, (byte)0x36, (byte)0x85, (byte)0x00, (byte)0x5a, (byte)0x4a, (byte)0x31, (byte)0x07, (byte)0x50, (byte)0x7d, (byte)0xea, (byte)0x90, (byte)0x88,
	(byte)0x52, (byte)0x15, (byte)0x68, (byte)0xc5, (byte)0x01, (byte)0x03, (byte)0x98, (byte)0x4e, (byte)0x58, (byte)0x9b, (byte)0xc1, (byte)0xaf, (byte)0xb5, (byte)0x1a, (byte)0x43, (byte)0xe9,
	(byte)0xab, (byte)0x26, (byte)0xc4, (byte)0xc2, (byte)0x48, (byte)0xb2, (byte)0xa2, (byte)0xc3, (byte)0xe4, (byte)0x6e, (byte)0x10, (byte)0xae, (byte)0xa1, (byte)0x34, (byte)0x25, (byte)0x94,
	(byte)0x47, (byte)0xdc, (byte)0x91, (byte)0xf0, (byte)0x18, (byte)0xd5, (byte)0x81, (byte)0xe3, (byte)0x33, (byte)0x7b, (byte)0x27, (byte)0x75, (byte)0x0b, (byte)0x1b, (byte)0x0c, (byte)0xce,
	(byte)0xef, (byte)0x6f, (byte)0xf5, (byte)0xfd, (byte)0x5c, (byte)0x05, (byte)0x9a, (byte)0xd8, (byte)0x42, (byte)0xc7, (byte)0xbd, (byte)0xd9, (byte)0x8b, (byte)0x06, (byte)0x72, (byte)0xb1,
	(byte)0xb7, (byte)0x79, (byte)0x9c, (byte)0x1e, (byte)0xe7, (byte)0xa6, (byte)0x46, (byte)0xf7, (byte)0x0a, (byte)0x93, (byte)0x6d, (byte)0x3d, (byte)0x2f, (byte)0x9d, (byte)0x0f, (byte)0x57,
	(byte)0xf2, (byte)0xd7, (byte)0x2b, (byte)0xd6, (byte)0xa5, (byte)0xb4, (byte)0xac, (byte)0x3f, (byte)0xee, (byte)0xe0, (byte)0x2a, (byte)0xcc, (byte)0x51, (byte)0x7c, (byte)0x71, (byte)0x17,
	(byte)0x6a, (byte)0x92, (byte)0x76, (byte)0x83, (byte)0xba, (byte)0x4c, (byte)0x8d, (byte)0x44, (byte)0xa4, (byte)0xe5, (byte)0x78, (byte)0x56, (byte)0xb6, (byte)0x41, (byte)0x65, (byte)0x20,
	(byte)0x55, (byte)0xde, (byte)0xa8, (byte)0xdf, (byte)0x59, (byte)0xa7, (byte)0x1d, (byte)0xcd, (byte)0x77, (byte)0x7f, (byte)0x80, (byte)0x99, (byte)0xf9, (byte)0x16, (byte)0xeb, (byte)0xfe,
	(byte)0x87, (byte)0x5b, (byte)0x9f, (byte)0xd0, (byte)0x28, (byte)0x63, (byte)0x29, (byte)0xbe, (byte)0x04, (byte)0x8a, (byte)0xe2, (byte)0x35, (byte)0x8f, (byte)0xb8, (byte)0xd1, (byte)0x7e,
	(byte)0xd2, (byte)0xaa, (byte)0xca, (byte)0x8e, (byte)0x97, (byte)0x3b, (byte)0xe1, (byte)0x32, (byte)0x6b, (byte)0xcf, (byte)0x38, (byte)0xe8, (byte)0xfa, (byte)0xcb, (byte)0xc6, (byte)0x74,
	(byte)0x82, (byte)0x86, (byte)0xad, (byte)0x67, (byte)0xc8, (byte)0xd3, (byte)0x4f, (byte)0xa9, (byte)0x54, (byte)0x23, (byte)0xc9, (byte)0xbf, (byte)0xf4, (byte)0xa3, (byte)0xfb, (byte)0x19,
	(byte)0xed, (byte)0x6c, (byte)0x96, (byte)0xbb, (byte)0x3e, (byte)0x64, (byte)0x39, (byte)0x40, (byte)0xb0, (byte)0x3a, (byte)0x66, (byte)0x8c, (byte)0x21, (byte)0xec, (byte)0x4d, (byte)0x95,
	(byte)0xa0, (byte)0x08, (byte)0x60, (byte)0x2e, (byte)0xf3, (byte)0xbc, (byte)0x45, (byte)0x5d, (byte)0xf1, (byte)0x7a, (byte)0x11, (byte)0x24, (byte)0x5e, (byte)0x02, (byte)0xdd, (byte)0x89,
	(byte)0x2c, (byte)0x12, (byte)0x70, (byte)0x37, (byte)0x13, (byte)0x4b, (byte)0x14, (byte)0xf8, (byte)0x62, (byte)0xda, (byte)0x0d, (byte)0x69, (byte)0x49, (byte)0x0e, (byte)0xdb, (byte)0xff
    };

    //WPNP TCP Message Crypt Table 6
    private static final byte TcpCodeTable6[] =
    {
	(byte)0xad, (byte)0x33, (byte)0x6e, (byte)0x35, (byte)0x3b, (byte)0x91, (byte)0x63, (byte)0x45, (byte)0x50, (byte)0x4f, (byte)0xf9, (byte)0x23, (byte)0x60, (byte)0xf2, (byte)0xf4, (byte)0x02,
	(byte)0x3e, (byte)0xd5, (byte)0x69, (byte)0x94, (byte)0xd3, (byte)0xff, (byte)0x98, (byte)0x29, (byte)0xb4, (byte)0xf3, (byte)0x6c, (byte)0xa0, (byte)0x52, (byte)0x9f, (byte)0x90, (byte)0xcf,
	(byte)0xdd, (byte)0x30, (byte)0x0f, (byte)0x70, (byte)0xcc, (byte)0x86, (byte)0x7b, (byte)0xd8, (byte)0x38, (byte)0x9d, (byte)0xfe, (byte)0x21, (byte)0xb8, (byte)0x78, (byte)0x6d, (byte)0x1f,
	(byte)0x8e, (byte)0x8c, (byte)0x40, (byte)0x7f, (byte)0x4d, (byte)0x3c, (byte)0x9a, (byte)0x1c, (byte)0xf0, (byte)0x11, (byte)0x41, (byte)0x44, (byte)0xea, (byte)0x5f, (byte)0xc2, (byte)0xaa,
	(byte)0x22, (byte)0xd4, (byte)0xde, (byte)0x20, (byte)0x36, (byte)0x97, (byte)0x2e, (byte)0x13, (byte)0xcd, (byte)0x03, (byte)0x77, (byte)0x07, (byte)0x17, (byte)0x75, (byte)0x68, (byte)0x59,
	(byte)0xac, (byte)0xd6, (byte)0xb6, (byte)0xe4, (byte)0x2c, (byte)0x79, (byte)0x55, (byte)0x54, (byte)0x34, (byte)0x8a, (byte)0xa5, (byte)0xe5, (byte)0xec, (byte)0xc9, (byte)0x2f, (byte)0x09,
	(byte)0x4e, (byte)0xe3, (byte)0xd2, (byte)0xca, (byte)0x4a, (byte)0x06, (byte)0x0b, (byte)0xa7, (byte)0xa1, (byte)0xc4, (byte)0x85, (byte)0xab, (byte)0x89, (byte)0x27, (byte)0x93, (byte)0x42,
	(byte)0x81, (byte)0x9e, (byte)0x05, (byte)0xae, (byte)0xdb, (byte)0xe8, (byte)0x8b, (byte)0x74, (byte)0x00, (byte)0x61, (byte)0x8f, (byte)0xda, (byte)0x3a, (byte)0xf5, (byte)0xbc, (byte)0xe2,
	(byte)0x12, (byte)0x9b, (byte)0xc5, (byte)0x87, (byte)0x6b, (byte)0xb1, (byte)0x2a, (byte)0xc8, (byte)0x95, (byte)0xa6, (byte)0x88, (byte)0xb5, (byte)0x56, (byte)0xa3, (byte)0x48, (byte)0x46,
	(byte)0x64, (byte)0x9c, (byte)0xbe, (byte)0xa2, (byte)0x67, (byte)0xa4, (byte)0xeb, (byte)0x5b, (byte)0x71, (byte)0x83, (byte)0xb2, (byte)0xe6, (byte)0x6f, (byte)0x2b, (byte)0xc0, (byte)0x31,
	(byte)0x1e, (byte)0xa9, (byte)0x57, (byte)0xa8, (byte)0x6a, (byte)0x62, (byte)0xb7, (byte)0x5a, (byte)0x8d, (byte)0x82, (byte)0x1b, (byte)0x28, (byte)0x47, (byte)0x39, (byte)0x0c, (byte)0x7c,
	(byte)0xb9, (byte)0xee, (byte)0x01, (byte)0x14, (byte)0x0d, (byte)0x04, (byte)0x51, (byte)0x49, (byte)0xf7, (byte)0xd9, (byte)0xb0, (byte)0x2d, (byte)0x1a, (byte)0xef, (byte)0xba, (byte)0x43,
	(byte)0x84, (byte)0xaf, (byte)0xd0, (byte)0xfd, (byte)0x96, (byte)0xc1, (byte)0xc6, (byte)0xf8, (byte)0x16, (byte)0x25, (byte)0xf1, (byte)0x5e, (byte)0x7e, (byte)0x58, (byte)0x08, (byte)0x0e,
	(byte)0xe0, (byte)0x66, (byte)0xc7, (byte)0x26, (byte)0x24, (byte)0x80, (byte)0x5c, (byte)0x10, (byte)0xe7, (byte)0x3f, (byte)0x92, (byte)0xed, (byte)0x53, (byte)0xbf, (byte)0xe9, (byte)0x18,
	(byte)0x73, (byte)0xe1, (byte)0xd1, (byte)0xf6, (byte)0xdf, (byte)0xfb, (byte)0xfc, (byte)0x76, (byte)0xd7, (byte)0x19, (byte)0x5d, (byte)0x65, (byte)0xbd, (byte)0x1d, (byte)0x7a, (byte)0x72,
	(byte)0x3d, (byte)0x4b, (byte)0x4c, (byte)0x99, (byte)0x0a, (byte)0xce, (byte)0x32, (byte)0xc3, (byte)0x37, (byte)0xcb, (byte)0xfa, (byte)0xb3, (byte)0x7d, (byte)0x15, (byte)0xbb, (byte)0xdc
    };

    //WPNP TCP Message Crypt Table 7
    private static final byte TcpCodeTable7[] =
    {
	(byte)0x78, (byte)0xb2, (byte)0x0f, (byte)0x49, (byte)0xb5, (byte)0x72, (byte)0x65, (byte)0x4b, (byte)0xce, (byte)0x5f, (byte)0xf4, (byte)0x66, (byte)0xae, (byte)0xb4, (byte)0xcf, (byte)0x22,
	(byte)0xd7, (byte)0x39, (byte)0x80, (byte)0x47, (byte)0xb3, (byte)0xfd, (byte)0xc8, (byte)0x4c, (byte)0xdf, (byte)0xe9, (byte)0xbc, (byte)0xaa, (byte)0x37, (byte)0xed, (byte)0xa0, (byte)0x2f,
	(byte)0x43, (byte)0x2b, (byte)0x40, (byte)0x0b, (byte)0xd4, (byte)0xc9, (byte)0xd3, (byte)0x6d, (byte)0xab, (byte)0x17, (byte)0x86, (byte)0x9d, (byte)0x54, (byte)0xbb, (byte)0x46, (byte)0x5e,
	(byte)0x21, (byte)0x9f, (byte)0xf6, (byte)0x01, (byte)0x58, (byte)0x03, (byte)0x44, (byte)0xf8, (byte)0x28, (byte)0xad, (byte)0x7c, (byte)0x04, (byte)0x35, (byte)0xf0, (byte)0x10, (byte)0xd9,
	(byte)0x32, (byte)0x3a, (byte)0x6f, (byte)0xbf, (byte)0x3b, (byte)0x07, (byte)0x8f, (byte)0xac, (byte)0x8e, (byte)0xb7, (byte)0x64, (byte)0xf1, (byte)0xf2, (byte)0x34, (byte)0x60, (byte)0x09,
	(byte)0x08, (byte)0xb6, (byte)0x1c, (byte)0xdc, (byte)0x57, (byte)0x56, (byte)0x8c, (byte)0xa2, (byte)0xcd, (byte)0x4f, (byte)0xa7, (byte)0x97, (byte)0xd6, (byte)0xea, (byte)0xcb, (byte)0x3d,
	(byte)0x0c, (byte)0x79, (byte)0xa5, (byte)0x06, (byte)0x90, (byte)0xeb, (byte)0xd1, (byte)0x94, (byte)0x4e, (byte)0x12, (byte)0xa4, (byte)0x84, (byte)0x1a, (byte)0x2e, (byte)0x02, (byte)0x9c,
	(byte)0x23, (byte)0x98, (byte)0xef, (byte)0xe0, (byte)0x77, (byte)0x4d, (byte)0xe7, (byte)0x4a, (byte)0x2d, (byte)0x55, (byte)0xee, (byte)0x26, (byte)0xaf, (byte)0xfc, (byte)0xcc, (byte)0x33,
	(byte)0xd5, (byte)0x70, (byte)0xa9, (byte)0x99, (byte)0xc0, (byte)0x6a, (byte)0x25, (byte)0x83, (byte)0x8a, (byte)0x6c, (byte)0x59, (byte)0x76, (byte)0x31, (byte)0xa8, (byte)0x30, (byte)0x7a,
	(byte)0x1e, (byte)0x05, (byte)0xda, (byte)0x6e, (byte)0x13, (byte)0x88, (byte)0xc4, (byte)0x45, (byte)0x16, (byte)0xf3, (byte)0x36, (byte)0x81, (byte)0x91, (byte)0x29, (byte)0x71, (byte)0x1d,
	(byte)0x1b, (byte)0x68, (byte)0x93, (byte)0x8d, (byte)0x95, (byte)0x5a, (byte)0x89, (byte)0x67, (byte)0xa3, (byte)0xa1, (byte)0x3f, (byte)0x6b, (byte)0x50, (byte)0x00, (byte)0x73, (byte)0xc1,
	(byte)0xba, (byte)0x85, (byte)0x9a, (byte)0xfb, (byte)0x18, (byte)0x8b, (byte)0x52, (byte)0xa6, (byte)0x2c, (byte)0xb0, (byte)0xbe, (byte)0xfe, (byte)0x7e, (byte)0xec, (byte)0x92, (byte)0xdd,
	(byte)0x9e, (byte)0xc5, (byte)0x3e, (byte)0xf7, (byte)0x69, (byte)0x82, (byte)0xc6, (byte)0xd2, (byte)0x87, (byte)0x5d, (byte)0x63, (byte)0xf9, (byte)0x24, (byte)0x48, (byte)0xf5, (byte)0x1f,
	(byte)0xc2, (byte)0xe2, (byte)0x62, (byte)0x14, (byte)0x41, (byte)0x11, (byte)0x51, (byte)0xe8, (byte)0x27, (byte)0xb9, (byte)0x7b, (byte)0x74, (byte)0xff, (byte)0x20, (byte)0x42, (byte)0xe4,
	(byte)0xd0, (byte)0xe1, (byte)0x7f, (byte)0x61, (byte)0x53, (byte)0x5b, (byte)0x9b, (byte)0xd8, (byte)0x75, (byte)0xde, (byte)0x3c, (byte)0x96, (byte)0x5c, (byte)0xdb, (byte)0xb1, (byte)0xbd,
	(byte)0x38, (byte)0xca, (byte)0x0d, (byte)0x19, (byte)0x0e, (byte)0x7d, (byte)0xe3, (byte)0xb8, (byte)0xc7, (byte)0x0a, (byte)0xfa, (byte)0xe5, (byte)0xe6, (byte)0xc3, (byte)0x2a, (byte)0x15
    };

    //Convert byte to short
    private static short ByteToShort(final byte bCode)
    {
	return (short)((bCode >= 0)? bCode : bCode + 256);
    }

    //Create Crypt Key Block for send
    public static void CreateCryptKeyID(final short sID, byte [] pBlock)
    {
	for(int i=0 ; i < 16 ; i++)
	{
	    //pBlock[i] = (byte)(Math.random() * 255);
	}
	
	pBlock[4] = (byte)(pBlock[15] ^ pBlock[13] ^ pBlock[5] ^ pBlock[2]);
	pBlock[9] = (byte)((byte)(pBlock[14] ^ pBlock[8] ^ pBlock[1]) + (byte)sID);
	pBlock[11] = (byte)((byte)(pBlock[12] ^ pBlock[10] ^ pBlock[7] ^ pBlock[6] ^ pBlock[3] ^ pBlock[0]) + (byte)(sID >>> 7));
	
	for(int i=0 ; i < 105 ; i++)
	{
	    byte bK = (i != 0)? pBlock[(i -  1) % 16] : 0x57;
	    
	    if(i % 5 != 0)
	    {
		pBlock[i % 16] += bK;
	    }
	    else
	    {
		pBlock[i % 16] ^= bK;
	    }
	}
    }

    //Get Key ID from Key Block
    public static short GetCryptKeyID(byte [] pBlock)
    {
	byte [] Key = new byte[16];
	
	for(int i=0 ; i < 16 ; i++)
	{
	    Key[i] = pBlock[i];
	}
	
	for(int i=104 ; i >= 0 ; i--)
	{
	    byte b = (i != 0)? Key[(i - 1) % 16] : 0x57;
	    
	    if(i % 5 != 0)
	    {
		Key[i % 16] -= b;
	    }
	    else
	    {
		Key[i % 16] ^= b;
	    }
	}
	
	byte bKeyID = (byte)(Key[9] - (Key[14] ^ Key[8] ^ Key[1]));
	
	if(Key[4] != (Key[15] ^ Key[13] ^ Key[5] ^ Key[2]) || (Key[12] ^ Key[10] ^ Key[7] ^ Key[6] ^ Key[3] ^ Key[0]) != (Key[11] - (bKeyID >>> 7)))
	{
	    return (short)0xFFFF;
	}
	
	return bKeyID;
    }

    //Get Crypt Key from Key Block
    public static short GetCryptKey(byte [] pBlock, CWpnCryptKey pCryptKey)
    {
	final boolean zUPlus, zDPlus;
	final byte bUK0, bUK1, bUK2, bUK3, bUD;
	final byte bDK0, bDK1, bDK2, bDK3, bDD;
	
	final short sKeyID = GetCryptKeyID(pBlock);
	
	switch(sKeyID)
	{
	    case 0x0050 :
	    case 0x0051 :
		bUK0 =  2; bUK1 =  5; bUK2 =  9; bUK3 = 11; bUD = 0x68; zUPlus = false; // SV PR
		bDK0 =  4; bDK1 = 12; bDK2 = 10; bDK3 =  7; bDD = 0x67; zDPlus = false; // SV PR
		break;
		
	    case 0x0052 :
	    case 0x0053 :
		bUK0 =  7; bUK1 =  3; bUK2 =  9; bUK3 =  5; bUD = 0x54; zUPlus = true;  // SV SE
		bDK0 =  2; bDK1 =  8; bDK2 = 13; bDK3 =  6; bDD = 0x55; zDPlus = true;  // SV SE
		break;
		
	    case 0x0057 :
	    case 0x0058 :
		bUK0 =  7; bUK1 =  3; bUK2 =  9; bUK3 =  5; bUD = 0x22; zUPlus = false; // SV CH
		bDK0 =  2; bDK1 =  8; bDK2 = 13; bDK3 =  6; bDD = 0x7A; zDPlus = true;  // SV CH
		break;
		
	    default :
		return sKeyID;
	}
	
	if(sKeyID == 0x0051 || sKeyID == 0x0053 || sKeyID == 0x0058)
	{
	    pCryptKey.DwKey[ 3 ] = pBlock[ bUK3 ];
	    pCryptKey.DwKey[ 2 ] = pBlock[ bUK2 ];
	    pCryptKey.DwKey[ 1 ] = pBlock[ bUK1 ];
	    pCryptKey.DwKey[ 0 ] = (byte)((zUPlus)? (pBlock[ bUK0 ] + bUD) : (pBlock[ bUK0 ] - bUD));
	    
	    pCryptKey.UpKey[ 3 ] = pBlock[ bDK3 ];
	    pCryptKey.UpKey[ 2 ] = pBlock[ bDK2 ];
	    pCryptKey.UpKey[ 1 ] = pBlock[ bDK1 ];
	    pCryptKey.UpKey[ 0 ] = (byte)((zDPlus)? (pBlock[ bDK0 ] + bDD) : (pBlock[ bDK0 ] - bDD));
	}
	else
	{
	    pCryptKey.UpKey[ 3 ] = pBlock[ bUK3 ];
	    pCryptKey.UpKey[ 2 ] = pBlock[ bUK2 ];
	    pCryptKey.UpKey[ 1 ] = pBlock[ bUK1 ];
	    pCryptKey.UpKey[ 0 ] = (byte)((zUPlus)? (pBlock[ bUK0 ] + bUD) : (pBlock[ bUK0 ] - bUD));
	    
	    pCryptKey.DwKey[ 3 ] = pBlock[ bDK3 ];
	    pCryptKey.DwKey[ 2 ] = pBlock[ bDK2 ];
	    pCryptKey.DwKey[ 1 ] = pBlock[ bDK1 ];
	    pCryptKey.DwKey[ 0 ] = (byte)((zDPlus)? (pBlock[ bDK0 ] + bDD) : (pBlock[ bDK0 ] - bDD));
	}
	
	return sKeyID;
    }

    //Decrypt WPNP TCP Message Byte
    private static byte DecryptTcpByte(final byte bCode, CWpnCryptKey pCryptKey)
    {
	byte bRet = 0;
	
	switch( pCryptKey.DwKey[ 2 ] & 0x03 )
	{
	    case 0:	bRet = TcpCodeTable2[ ByteToShort((byte)(pCryptKey.DwKey[ 1 ] ^ bCode)) ]; break;
	    case 1:	bRet = TcpCodeTable6[ ByteToShort((byte)(pCryptKey.DwKey[ 1 ] ^ bCode)) ]; break;
	    case 2:	bRet = (byte)( pCryptKey.DwKey[ 0 ] ^ TcpCodeTable0[ ByteToShort(bCode) ] ); break;
	    case 3:	bRet = (byte)( pCryptKey.DwKey[ 3 ] ^ TcpCodeTable6[ ByteToShort(bCode) ] ); break;
	}
	
	pCryptKey.DwKey[ 0 ] += pCryptKey.DwKey[ 1 ];
	pCryptKey.DwKey[ 1 ] ^= pCryptKey.DwKey[ 3 ];
	pCryptKey.DwKey[ 2 ] += TcpCodeTable4[ ByteToShort(bCode) ];
	pCryptKey.DwKey[ 3 ] ^= pCryptKey.DwKey[ 2 ];
	pCryptKey.DwKey[ 1 ]++;
	pCryptKey.DwKey[ 2 ]++;
	pCryptKey.DwKey[ 3 ]++;
	
	return bRet;
    }

    //Encrypt WPNP TCP Message Byte
    private static byte EncryptTcpByte(final byte bCode, CWpnCryptKey pCryptKey)
    {
	byte bRet = 0;
	
	switch( pCryptKey.UpKey[ 2 ] & 0x03 )
	{
	    case 0:	bRet = (byte)( pCryptKey.UpKey[ 1 ] ^ TcpCodeTable3[ ByteToShort(bCode) ] ); break;
	    case 1:	bRet = (byte)( pCryptKey.UpKey[ 1 ] ^ TcpCodeTable7[ ByteToShort(bCode) ] ); break;
	    case 2:	bRet = TcpCodeTable1[ ByteToShort((byte)(pCryptKey.UpKey[ 0 ] ^ bCode)) ]; break;
	    case 3:	bRet = TcpCodeTable7[ ByteToShort((byte)(pCryptKey.UpKey[ 3 ] ^ bCode)) ]; break;
	}

	pCryptKey.UpKey[ 0 ] += pCryptKey.UpKey[ 1 ];
	pCryptKey.UpKey[ 1 ] ^= pCryptKey.UpKey[ 3 ];
	pCryptKey.UpKey[ 2 ] += TcpCodeTable4[ ByteToShort(bRet) ];
	pCryptKey.UpKey[ 3 ] ^= pCryptKey.UpKey[ 2 ];
	pCryptKey.UpKey[ 1 ]++;
	pCryptKey.UpKey[ 2 ]++;
	pCryptKey.UpKey[ 3 ]++;

	return bRet;
    }

    //Decrypt WPNP TCP Message
    public static void DecryptTcp(byte [] pBuff, final int iLen, CWpnCryptKey pCryptKey)
    {
	for(int i = 0 ; i < iLen ; i++)
	{
	    pBuff[ i ] = DecryptTcpByte(pBuff[ i ], pCryptKey);
	}
    }

    //Encrypt WPNP TCP Message
    public static void EncryptTcp(byte [] pBuff, final int iLen, CWpnCryptKey pCryptKey)
    {
	for(int i = 0 ; i < iLen ; i++)
	{
	    pBuff[ i ] = EncryptTcpByte(pBuff[i], pCryptKey);
	}
    }
}
